"""Telegram bot handlers for commands and audio processing."""

import logging
import tempfile
from pathlib import Path

from aiogram import Bot, Dispatcher, F, Router
from aiogram.filters import Command
from aiogram.types import Message

from stt_tg_bot.services.groq_client import (
    GroqServiceUnavailableError,
    GroqTimeout,
    GroqUnsupportedFormatError,
    transcribe_with_fallback,
)
from stt_tg_bot.utils.access_control import (
    check_message_access,
    send_access_denied_message,
)
from stt_tg_bot.utils.messages import MESSAGES

logger = logging.getLogger(__name__)

router = Router()


@router.message(Command("start"))  # type: ignore[misc]
async def start_command(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if not check_message_access(message):
        await send_access_denied_message(message)
        return

    await message.reply(MESSAGES["start"])


@router.message(Command("help"))  # type: ignore[misc]
async def help_command(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help.

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if not check_message_access(message):
        await send_access_denied_message(message)
        return

    await message.reply(MESSAGES["help"])


@router.message(F.voice | F.audio | F.document)  # type: ignore[misc]
async def handle_audio(message: Message, bot: Bot) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–π (–≥–æ–ª–æ—Å–æ–≤—ã–µ, –∞—É–¥–∏–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã).

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∞—É–¥–∏–æ
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    """
    if not check_message_access(message):
        await send_access_denied_message(message)
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_message = await message.reply(MESSAGES["processing"])

    # –í–∫–ª—é—á–∞–µ–º typing –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
    await bot.send_chat_action(chat_id=message.chat.id, action="typing")

    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –∏ –ø–æ–ª—É—á–∞–µ–º file_id
        if message.voice:
            file_id = message.voice.file_id
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º voice —Å–æ–æ–±—â–µ–Ω–∏–µ: {file_id}")
        elif message.audio:
            file_id = message.audio.file_id
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º audio —Ñ–∞–π–ª: {file_id}")
        elif message.document:
            file_id = message.document.file_id
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º document: {file_id}")
        else:
            logger.warning("–ü–æ–ª—É—á–µ–Ω –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è")
            await processing_message.edit_text(MESSAGES["unsupported_format"])
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        try:
            file_info = await bot.get_file(file_id)
            logger.info(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ: {file_info.file_path}")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ: {e}")
            await processing_message.edit_text(MESSAGES["download_error"])
            return

        if not file_info.file_path:
            logger.error("–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            await processing_message.edit_text(MESSAGES["download_error"])
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        file_extension = ".ogg"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if message.audio and message.audio.file_name:
            # –î–ª—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –±–µ—Ä—ë–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
            original_name = Path(message.audio.file_name)
            file_extension = original_name.suffix or ".mp3"
        elif message.document and message.document.file_name:
            # –î–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Ç–æ–∂–µ –±–µ—Ä—ë–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
            original_name = Path(message.document.file_name)
            file_extension = original_name.suffix or ".mp3"

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
        with tempfile.NamedTemporaryFile(
            suffix=file_extension, delete=False
        ) as temp_file:
            temp_path = Path(temp_file.name)

        try:
            await bot.download_file(file_info.file_path, temp_path)
            logger.info(f"–§–∞–π–ª —Å–∫–∞—á–∞–Ω: {temp_path}")

            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∞—É–¥–∏–æ —Å fallback
            transcription = await transcribe_with_fallback(temp_path)

            if not transcription:
                await processing_message.edit_text(MESSAGES["empty_transcription"])
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            # –ï—Å–ª–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–∞—è, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
            max_length = 4000  # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å –æ—Ç –ª–∏–º–∏—Ç–∞ –≤ 4096 —Å–∏–º–≤–æ–ª–æ–≤

            if len(transcription) <= max_length:
                await processing_message.edit_text(transcription)
            else:
                # –£–¥–∞–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await processing_message.delete()

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ —á–∞—Å—Ç—è–º
                parts = []
                for i in range(0, len(transcription), max_length):
                    part = transcription[i : i + max_length]
                    parts.append(part)

                for i, part in enumerate(parts):
                    if i == 0:
                        await message.reply(f"üìù –ß–∞—Å—Ç—å {i+1}/{len(parts)}:\n\n{part}")
                    else:
                        await message.answer(f"üìù –ß–∞—Å—Ç—å {i+1}/{len(parts)}:\n\n{part}")

        except GroqUnsupportedFormatError:
            logger.warning("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞")
            await processing_message.edit_text(MESSAGES["unsupported_format"])

        except GroqServiceUnavailableError:
            logger.error("–°–µ—Ä–≤–∏—Å Groq –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            await processing_message.edit_text(MESSAGES["service_unavailable"])

        except GroqTimeout:
            logger.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Groq")
            await processing_message.edit_text(MESSAGES["timeout_error"])

        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ: {e}")
            await processing_message.edit_text(MESSAGES["general_error"])

        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if temp_path.exists():
                temp_path.unlink()
                logger.info(f"–£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {temp_path}")

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∞—É–¥–∏–æ: {e}")
        try:
            await processing_message.edit_text(MESSAGES["general_error"])
        except Exception:  # nosec B110 - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ UI –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è


@router.message()  # type: ignore[misc]
async def handle_other_messages(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if not check_message_access(message):
        await send_access_denied_message(message)
        return

    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
    # (—Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó, –Ω–∏–∫–∞–∫–∏—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –Ω–µ –Ω—É–∂–Ω–æ)
    pass


def setup_handlers(dp: Dispatcher) -> None:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ.

    Args:
        dp: –î–∏—Å–ø–µ—Ç—á–µ—Ä aiogram
    """
    dp.include_router(router)
